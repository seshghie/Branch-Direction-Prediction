#include "ooo_cpu.h"
#include <algorithm>
#include <vector>

#define BIMODAL_TABLE_SIZE 32768
#define TOURNAMENT_TABLE_SIZE 16384
#define GLOBAL_HISTORY_LENGTH 2
#define GLOBAL_HIST_MASK ((1 << GLOBAL_HISTORY_LENGTH) - 1)
#define PC_BITS (11 - GLOBAL_HISTORY_LENGTH)
#define PC_MASK ((1 << PC_BITS) - 1)
#define MAX_COUNTER 3

int LH_BITS = 14;
int PC_BITS_LOCAL = 8;

std::vector<std::vector<int8_t>> local_history_table;  // Table 1
std::vector<int8_t> counter_table;                     // Table 2

int8_t bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];
int8_t chooser_table[NUM_CPUS][TOURNAMENT_TABLE_SIZE];
uint16_t GLOBAL_HISTORY = 0;

inline void clamp(int8_t& value) {
    value = std::clamp(value, int8_t(0), int8_t(MAX_COUNTER));
}

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << "Tournament table" << endl;

    // Gloabl table init
    std::fill_n(bimodal_table[cpu], BIMODAL_TABLE_SIZE, 0);
    GLOBAL_HISTORY = 0;

    // Local table init
    int table1_size = 1 << PC_BITS_LOCAL; // Size of local history table = 2^PC_BITS_LOCAL
    int table2_size = 1 << LH_BITS; // Size of counter table = 2^LH_BITS

    // Init local history table with zero LH bits
    local_history_table.resize(table1_size, std::vector<int8_t>(LH_BITS, 0));

    // Init Table 2
    counter_table.resize(table2_size, 0);

    // Choser table init
    std::fill_n(chooser_table[cpu], TOURNAMENT_TABLE_SIZE, 0);
}

uint8_t predict_branch_local(uint64_t ip)
{
    uint32_t index1 = ip % (1 << PC_BITS_LOCAL);  // Index for Table 1 using PC bits
    uint32_t local_history = 0;

    // Convert history stored in Table 1 to an integer
    for (int i = 0; i < LH_BITS; i++) {
        local_history |= (local_history_table[index1][i] << i);
    }

    // Use history to index into Table 2
    uint32_t index2 = local_history;

    // Make prediction based on Table 2
    uint8_t prediction = (counter_table[index2] >= (MAX_COUNTER + 1) / 2) ? 1 : 0;
    return prediction;
}

uint32_t compute_hash(uint64_t ip, uint16_t history)
{
    return (((ip & PC_MASK) << GLOBAL_HISTORY_LENGTH) | history) % (BIMODAL_TABLE_SIZE - 1);
}

uint8_t predict_branch_global(uint64_t ip, uint32_t cpu)
{
    uint32_t hash = compute_hash(ip, GLOBAL_HISTORY);
    return (bimodal_table[cpu][hash] >= (int8_t)((MAX_COUNTER + 1)/2)) ? 1 : 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash  = ip % (TOURNAMENT_TABLE_SIZE - 1); if (chooser_table[cpu][hash] >= 2) {
        return predict_branch_global(ip, cpu);
    } else {
        return predict_branch_local(ip);
    }
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    // Process Chooser
    uint8_t global_predict = predict_branch_global(ip, cpu);
    uint8_t local_predict = predict_branch_local(ip);

    uint32_t hash1 = ip % (TOURNAMENT_TABLE_SIZE - 1);

    if (global_predict == taken && local_predict != taken) {
		chooser_table[cpu][hash1]++;
		clamp(chooser_table[cpu][hash1]);
	}
    else if (global_predict != taken && local_predict == taken) {
		chooser_table[cpu][hash1]--;
		clamp(chooser_table[cpu][hash1]);
	}

    // Process global
    uint32_t hash = compute_hash(ip, GLOBAL_HISTORY);
    
    if (taken) {
        bimodal_table[cpu][hash]++;
    } else {
        bimodal_table[cpu][hash]--;
    }
    clamp(bimodal_table[cpu][hash]);

    GLOBAL_HISTORY = ((GLOBAL_HISTORY << 1) | taken) & GLOBAL_HIST_MASK;

    // Process local
    uint32_t index1 = ip % (1 << PC_BITS_LOCAL);  // Index for Table 1 using PC bits
    uint32_t local_history = 0;

    // Convert history stored in Table 1 to an integer
    for (int i = 0; i < LH_BITS; i++) {
        local_history |= (local_history_table[index1][i] << i);
    }

    // Update the 2-bit counter in Table 2
    uint32_t index2 = local_history;

    if (taken) {
        counter_table[index2]++;
    } else {
        counter_table[index2]--;
    }
    clamp(counter_table[index2]);

    // Update local history in Table 1 (shift left and insert new outcome)
    for (int i = LH_BITS - 1; i > 0; i--) {
        local_history_table[index1][i] = local_history_table[index1][i - 1];
    }
    local_history_table[index1][0] = taken;  // Insert current outcome at position 0
}